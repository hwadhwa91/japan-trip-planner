<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8" /> <meta name="viewport" content="width=device-width, initial-scale=1" /> <title>Japan Trip — Nov 5–19</title> <link rel="stylesheet" href="style.css" /> </head> <body> <header class="header"> <h1>Japan Travel Itinerary Planner</h1> <p>Top 100 activities across Tokyo, Kyoto, Osaka, Hiroshima, Nara, Nikko, Mount Fuji area, Hakone, Kamakura, and Kawagoe</p> <div class="dates">New Delhi → Tokyo - Nov 5–19</div> </header> <section class="controls"> <input id="search" placeholder="Search activity or description..." /> <select id="cityFilter"> <option value="">All Cities</option> <option>Tokyo</option><option>Kyoto</option><option>Osaka</option> <option>Hiroshima</option><option>Nara</option><option>Nikko</option> <option>Mount Fuji Area</option><option>Hakone</option> <option>Kamakura</option><option>Kawagoe</option> </select> <select id="costFilter"> <option value="">All Costs</option> <option value="free">Free</option> <option value="under1k">Under ¥1,000</option> <option value="1kto3k">¥1,000–¥3,000</option> <option value="over3k">Over ¥3,000</option> </select> <button id="clearFilters">Clear filters</button> <button id="selectAllInCity">Select all in city → Yes</button> </section> <section class="summary"> <div>Total selected: <span id="totalSelected">0</span></div> <div>Yes: <span id="countYes">0</span> - Maybe: <span id="countMaybe">0</span> - No: <span id="countNo">0</span></div> <div>Estimated total cost: <span id="estimatedCost">¥0</span></div> <div id="byCity">By city: —</div> <button id="exportBtn">Export selected</button> </section> <main class="table-wrapper"> <table id="activitiesTable"> <thead> <tr> <th>S No.</th><th>City</th><th>Activity</th><th>Description</th> <th>How to reach</th><th>Cost</th><th>Selection</th> </tr> </thead> <tbody></tbody> </table> </main> <script> // 1) DATA — include all 100 items (paste the full list here) const activities = [ {S_No:1, City:'Tokyo', Activity:'Visit Tokyo Skytree', Description:"World's tallest tower at 634m offering panoramic views; decks at 350m and 450m; shops, aquarium, restaurants.", How_to_reach:'Tokyo Skytree Stn or Asakusa', Cost:'¥1,800-2,700'}, {S_No:2, City:'Tokyo', Activity:'Explore Senso-ji Temple & Asakusa', Description:"Tokyo's oldest temple (645 AD); Nakamise shopping street; incense and omikuji.", How_to_reach:'Asakusa Stn (5 min)', Cost:'Free'}, {S_No:3, City:'Tokyo', Activity:'TeamLab Planets Digital Art Museum', Description:'Immersive digital art; walk through water; 4 large artworks + 2 gardens; barefoot.', How_to_reach:'Shin-Toyosu (1 min)', Cost:'¥3,800'} // TODO: add items 4–100 here using plain characters (use & not &amp;) ]; // 2) HELPERS function estimateCost(costStr){ if(!costStr || typeof costStr !== 'string') return 0; if(costStr.toLowerCase().includes('free')) return 0; const nums = [...costStr.matchAll(/¥?([0-9,]+)/g)].map(m => parseInt(m.replace(/,/g,''),10));[11] if(nums.length===0) return 0; if(nums.length===1) return nums; return Math.round((nums + nums) / 2);[11] } const state = { filterText:'', city:'', cost:'', selections:new Map() }; // 3) RENDER TABLE function renderTable(){ const tbody = document.querySelector('#activitiesTable tbody'); tbody.innerHTML = ''; let data = activities.slice(); const q = state.filterText.trim().toLowerCase(); if(q){ data = data.filter(a => [a.City,a.Activity,a.Description,a.How_to_reach,a.Cost].join(' ').toLowerCase().includes(q)); } if(state.city){ data = data.filter(a => a.City === state.city); } if(state.cost){ data = data.filter(a=>{ const est = estimateCost(a.Cost); if(state.cost==='free') return est===0; if(state.cost==='under1k') return est>0 && est<1000; if(state.cost==='1kto3k') return est>=1000 && est<=3000; if(state.cost==='over3k') return est>3000; return true; }); } for(const a of data){ const tr = document.createElement('tr'); tr.innerHTML = ` <td>${a.S_No}</td> <td><span class="badge">${a.City}</span></td> <td>${a.Activity}</td> <td>${a.Description}</td> <td>${a.How_to_reach}</td> <td>${a.Cost}</td> <td class="select-cell"> <select data-id="${a.S_No}"> <option value="">Select</option> <option value="Yes">Yes</option> <option value="Maybe">Maybe</option> <option value="No">No</option> </select> </td> `; tbody.appendChild(tr); const sel = tr.querySelector('select'); sel.value = state.selections.get(a.S_No) || ''; sel.addEventListener('change', e => { const val = e.target.value; if(val) state.selections.set(a.S_No, val); else state.selections.delete(a.S_No); updateSummary(); }); } } // 4) SUMMARY function updateSummary(){ const values = [...state.selections.values()]; const yes = values.filter(v=>v==='Yes').length; const maybe = values.filter(v=>v==='Maybe').length; const no = values.filter(v=>v==='No').length; document.getElementById('countYes').textContent = yes; document.getElementById('countMaybe').textContent = maybe; document.getElementById('countNo').textContent = no; document.getElementById('totalSelected').textContent = yes + maybe + no; const selected = activities.filter(a => { const s = state.selections.get(a.S_No); return s==='Yes' || s==='Maybe'; }); const total = selected.reduce((sum,a)=> sum + estimateCost(a.Cost), 0); document.getElementById('estimatedCost').textContent = '¥' + total.toLocaleString(); const byCity = {}; for(const a of selected){ byCity[a.City] = (byCity[a.City]||0)+1; } document.getElementById('byCity').textContent = Object.keys(byCity).length ? Object.entries(byCity).map(([c,n])=>`${c}: ${n}`).join(' - ') : 'By city: —'; } // 5) EXPORT function exportSelected(){ const rows = activities.filter(a => { const s = state.selections.get(a.S_No); return s==='Yes' || s==='Maybe'; }).map(a => { const s = state.selections.get(a.S_No) || ''; return `${a.S_No}. [${a.City}] ${a.Activity} — ${s}\n - ${a.Description}\n - How to reach: ${a.How_to_reach}\n - Cost: ${a.Cost}`; }).join('\n\n'); const blob = new Blob([rows], {type:'text/plain;charset=utf-8'}); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'selected-activities.txt'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url); } // 6) INIT function init(){ document.getElementById('search').addEventListener('input', e => { state.filterText = e.target.value; renderTable(); }); document.getElementById('cityFilter').addEventListener('change', e => { state.city = e.target.value; renderTable(); }); document.getElementById('costFilter').addEventListener('change', e => { state.cost = e.target.value; renderTable(); }); document.getElementById('clearFilters').addEventListener('click', ()=>{ state.filterText=''; state.city=''; state.cost=''; document.getElementById('search').value=''; document.getElementById('cityFilter').value=''; document.getElementById('costFilter').value=''; renderTable(); updateSummary(); }); document.getElementById('exportBtn').addEventListener('click', exportSelected); document.getElementById('selectAllInCity').addEventListener('click', ()=>{ const city = document.getElementById('cityFilter').value; if(!city){ alert('Please choose a city filter first.'); return; } for(const a of activities){ if(a.City===city){ state.selections.set(a.S_No,'Yes'); } } renderTable(); updateSummary(); }); renderTable(); updateSummary(); } document.addEventListener('DOMContentLoaded', init); </script> </body> </html>